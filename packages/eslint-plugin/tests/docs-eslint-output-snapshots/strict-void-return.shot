// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Validating rule docs strict-void-return.mdx code examples ESLint output 1`] = `
"Incorrect

const getNothing: () => void = () => 2137;
                                     ~~~~ Value returned in \`getNothing\` function variable, which expects a void function.
const getString: () => string = () => 'Hello';
const getStringMaybe = Math.random() > 0.1 ? getNothing : getString;
const maybeString = getStringMaybe();
if (maybeString) console.log(maybeString.toUpperCase()); // ❌ Crash if getNothing was called
"
`;

exports[`Validating rule docs strict-void-return.mdx code examples ESLint output 2`] = `
"Correct

const getNothing: () => void = () => {};
const getString: () => string = () => 'Hello';
const getStringMaybe = Math.random() > 0.1 ? getNothing : getString;
const maybeString = getStringMaybe();
if (maybeString) console.log(maybeString.toUpperCase()); // ✅ No crash
"
`;

exports[`Validating rule docs strict-void-return.mdx code examples ESLint output 3`] = `
"Incorrect

declare function takesCallback(cb: () => void): void;

takesCallback(async () => {
                       ~~ Async callback not wrapped with a try-catch block and passed as an argument to \`takesCallback\`, which expects a void callback.
  const response = await fetch('https://api.example.com/');
  const data = await response.json();
  console.log(data);
});
"
`;

exports[`Validating rule docs strict-void-return.mdx code examples ESLint output 4`] = `
"Correct

declare function takesCallback(cb: () => void): void;

takesCallback(() => {
  (async () => {
    const response = await fetch('https://api.example.com/');
    const data = await response.json();
    console.log(data);
  })().catch(console.error);
});
"
`;

exports[`Validating rule docs strict-void-return.mdx code examples ESLint output 5`] = `
"Incorrect

declare function takesCallback(cb: () => void): void;

takesCallback(function* () {
              ~~~~~~~~~~ Generator callback passed as an argument to \`takesCallback\`, which expects a void callback.
  console.log('Hello');
  yield;
  console.log('World');
});
"
`;

exports[`Validating rule docs strict-void-return.mdx code examples ESLint output 6`] = `
"Correct

declare function takesCallback(cb: () => void): void;

takesCallback(() => {
  function* gen() {
    console.log('Hello');
    yield;
    console.log('World');
  }
  for (const _ of gen());
});
"
`;

exports[`Validating rule docs strict-void-return.mdx code examples ESLint output 7`] = `
"Incorrect

['Kazik', 'Zenek'].forEach(name => \`Hello, \${name}!\`);
                                   ~~~~~~~~~~~~~~~~~ Value returned in a callback argument to \`forEach\`, which expects a void callback.
"
`;

exports[`Validating rule docs strict-void-return.mdx code examples ESLint output 8`] = `
"Correct

['Kazik', 'Zenek'].forEach(name => console.log(\`Hello, \${name}!\`));
"
`;

exports[`Validating rule docs strict-void-return.mdx code examples ESLint output 9`] = `
"Incorrect

declare function takesCallback(cb: () => void): void;
declare function TakesCallback(props: { cb: () => void }): string;
declare let callback: () => void;
declare let returnsCallback: () => () => void;
declare let callbackObj: Record<string, () => void>;
declare let callbackArr: (() => void)[];

takesCallback(() => 'Hello');
                    ~~~~~~~ Value returned in a callback argument to \`takesCallback\`, which expects a void callback.
<TakesCallback cb={() => 'Hello'} />;
                         ~~~~~~~ Value returned in \`cb\` event handler prop of \`TakesCallback\`, which expects a void \`cb\` event handler.
callback = () => 'Hello';
                 ~~~~~~~ Value returned in \`callback\` function variable, which expects a void function.
returnsCallback = () => {
  return () => 'Hello';
               ~~~~~~~ Value returned in a callback returned from a function, which must return a void callback
};
callbackObj = {
  hello: () => 'Hello',
               ~~~~~~~ Value returned in \`hello\` method of an object, which expects a void \`hello\` method.
};
callbackArr = [() => 'Hello'];
                     ~~~~~~~ Value returned in a context where a void return was expected.
"
`;

exports[`Validating rule docs strict-void-return.mdx code examples ESLint output 10`] = `
"Correct

declare function takesCallback(cb: () => void): void;
declare function TakesCallback(props: { cb: () => void }): string;
declare let callback: () => void;
declare let returnsCallback: () => () => void;
declare let callbackObj: Record<string, () => void>;
declare let callbackArr: (() => void)[];

takesCallback(() => console.log('Hello'));
<TakesCallback cb={() => console.log('Hello')} />;
callback = () => console.log('Hello');
returnsCallback = () => {
  return () => console.log('Hello');
};
callbackObj = {
  hello: () => console.log('Hello'),
};
callbackArr = [() => console.log('Hello')];
"
`;

exports[`Validating rule docs strict-void-return.mdx code examples ESLint output 11`] = `
"Incorrect

/// <reference lib="dom" />

document.addEventListener('click', () => {
  return 'Clicked';
  ~~~~~~ Value returned in a callback argument to \`document.addEventListener\`, whose other overload expects a void callback.
});
"
`;

exports[`Validating rule docs strict-void-return.mdx code examples ESLint output 12`] = `
"Correct

/// <reference lib="dom" />

document.addEventListener('click', () => {
  console.log('Clicked');
});
"
`;

exports[`Validating rule docs strict-void-return.mdx code examples ESLint output 13`] = `
"Incorrect

/// <reference lib="dom" />

class MyElement extends HTMLElement {
  click() {
    super.click();
    return 'Clicked';
    ~~~~~~ Value returned in \`click\` method of \`MyElement\`, whose base class \`HTMLElement\` declares it as a void method.
  }
}
"
`;

exports[`Validating rule docs strict-void-return.mdx code examples ESLint output 14`] = `
"Correct

/// <reference lib="dom" />

class MyElement extends HTMLElement {
  click() {
    super.click();
    console.log('Clicked');
  }
}
"
`;

exports[`Validating rule docs strict-void-return.mdx code examples ESLint output 15`] = `
"Incorrect

/// <reference lib="dom" />

class FooListener implements EventListenerObject {
  handleEvent() {
    return 'Handled';
    ~~~~~~ Value returned in \`handleEvent\` method of \`FooListener\`, whose interface \`EventListenerObject\` declares it as a void method.
  }
}
"
`;

exports[`Validating rule docs strict-void-return.mdx code examples ESLint output 16`] = `
"Correct

/// <reference lib="dom" />

class FooListener implements EventListenerObject {
  handleEvent() {
    console.log('Handled');
  }
}
"
`;

exports[`Validating rule docs strict-void-return.mdx code examples ESLint output 17`] = `
"Incorrect
Options: { "allowReturnPromiseIfTryCatch": false }

const cb: () => void = async () => {
                                ~~ Async function assigned to \`cb\` variable, which expects a void function.
  try {
    const response = await fetch('https://api.example.com/');
    const data = await response.json();
    console.log(data);
  } catch (error) {
    console.error(error);
  }
};
"
`;

exports[`Validating rule docs strict-void-return.mdx code examples ESLint output 18`] = `
"Correct
Options: { "allowReturnPromiseIfTryCatch": false }

const cb: () => void = () => {
  (async () => {
    const response = await fetch('https://api.example.com/');
    const data = await response.json();
    console.log(data);
  })().catch(console.error);
};
"
`;

exports[`Validating rule docs strict-void-return.mdx code examples ESLint output 19`] = `
"Incorrect
Options: { "allowReturnUndefined": false }

let cb: () => void;

cb = () => undefined;
           ~~~~~~~~~ Value returned in \`cb\` function variable, which expects a void function.

cb = () => {
  return void 0;
  ~~~~~~ Value returned in \`cb\` function variable, which expects a void function.
};
"
`;

exports[`Validating rule docs strict-void-return.mdx code examples ESLint output 20`] = `
"Correct
Options: { "allowReturnUndefined": false }

let cb: () => void;

cb = () => {};

cb = () => {
  return;
};
"
`;

exports[`Validating rule docs strict-void-return.mdx code examples ESLint output 21`] = `
"Incorrect
Options: { "allowReturnNull": false }

let cb: () => void;

cb = () => null;
           ~~~~ Value returned in \`cb\` function variable, which expects a void function.

cb = () => {
  return null;
  ~~~~~~ Value returned in \`cb\` function variable, which expects a void function.
};
"
`;

exports[`Validating rule docs strict-void-return.mdx code examples ESLint output 22`] = `
"Correct
Options: { "allowReturnNull": false }

let cb: () => void;

cb = () => {};

cb = () => {
  return;
};
"
`;

exports[`Validating rule docs strict-void-return.mdx code examples ESLint output 23`] = `
"Incorrect
Options: { "allowReturnAny": false }

declare function fn(cb: () => void): void;

fn(() => JSON.parse('{}'));
         ~~~~~~~~~~~~~~~~ Value returned in a callback argument to \`fn\`, which expects a void callback.

fn(() => {
  return someUntypedApi();
  ~~~~~~ Value returned in a callback argument to \`fn\`, which expects a void callback.
});
"
`;

exports[`Validating rule docs strict-void-return.mdx code examples ESLint output 24`] = `
"Correct
Options: { "allowReturnAny": false }

declare function fn(cb: () => void): void;

fn(() => void JSON.parse('{}'));

fn(() => {
  someUntypedApi();
});
"
`;
